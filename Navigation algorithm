// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>
#include<cstdlib>
using namespace std;


int main()
{
	//multidimentional array to store matrix
	int matrix[100][100] ;//request enough storage for matrix
	int distance[100];//store the first row of the matrix, &updating according to the new nodes visit

	int visited[100];
	int preD[100];//get the actual for pop

	int min;
	int nextNode = 0;
	int vertexsnum;
	cout << "Enter how many vertexs in the graph: ";
	cin >> vertexsnum;
	cout << "Enter matrix of the graph(PS: please input 0 instead of infinity): "<<endl;
	for (int i = 0; i <vertexsnum; i++)
	{
		visited[i] = 0;//initialization
		preD[i] = 0;
		for (int j = 0; j < vertexsnum; j++)
		{
			
			cin >> matrix[i][j];
			if (matrix[i][j]==0)
			matrix[i][j] = 999;
		}
	}


	

	int root;
	cout << "Choose the origin: ";
	cin >> root;

	if (root != 0)
	{
		for (int i = 0; i < vertexsnum; i++)
			swap(matrix[i][root], matrix[i][0]);
		for (int i = 0; i < vertexsnum; i++)
			swap(matrix[root][i], matrix[0][i]);
	}

	for (int i = 0; i < vertexsnum; i++)
		distance[i] = matrix[0][i];
	distance[0] = 0;//initialize the first element
	visited[0] = 1;

	//start the algorithm
	for (int i = 0; i < vertexsnum; i++)
	{
		min = 999;
		for (int j = 0; j < vertexsnum; j++) //pick the shortest path when choose the nextnode
			if (min > distance[j] && visited[j] != 1)
			{
				min = distance[j];
				nextNode = j;//pick the nextnode
			}
		
		visited[nextNode] = 1;
		//actual start the algorithm

		for (int i = 0; i < vertexsnum; i++)
			if (visited[i] != 1)
				if (min + matrix[nextNode][i] < distance[i])
				{
					distance[i] = min + matrix[nextNode][i];
					preD[i] = nextNode;
				}
			
		
	}

	

	for (int i = 1; i < vertexsnum; i++)
	{
		if (root != 0)
		{
			int out;
			int j = i;

			
			if (i == root)
				out = 0;
			else
			{
				out = i;
			}
			
			cout << "Path = " << out;
			do{
				j = preD[j];

				if (j == 0)
				{
					out = root;
				
				}
				else if (j == root)
				{
					out = 0;
				}
				else
				{
					out = j;
				}

				cout << " <- " << out;

			} while (j != 0);

			cout << endl;

			cout << "The distance is " << distance[i];// output the distance for each path
			cout << endl;

		}
		else
		{
			int j = i;
			cout << "Path = " << i;
			do{
				j = preD[j];
				cout << " <- " << j;
			} while (j != 0);

			cout << endl;

			cout << "The distance is " << distance[i];// output the distance for each path
			cout << endl;
		}
	}
	
	return 0;
}
